{
  "page_initializer": {
    "index_page_title": "Epic Minecraft wiki 2",
    "index_page_icon_path": "/resources_testing/cinnamon.png",
    "object_type": "item",
    "page_language": "en_us",
    "page_head": {
      "title": "Epic Cookie",
      "icon_path": "/resources_testing/cookie.png"
    },
    "containers":{
      "custom_description": "description",
      "custom_description2": "description",
      "custom_description3": "description",
      "custom_data_table": "data_table",
      "custom_recipe_table": "recipe_table",
      "custom_video_player": "video_player",
      "custom_code_snippet": "code_snippet"
    }
  },
  "custom_description": {
    "object_name": "Epic Cookie",
    "object_image_path": "/resources_testing/cookie.png",
    "object_description": "It's a very nice cookie :3"
  },
  "custom_description2": {
    "object_name": "Epic Cookie",
    "object_image_path": "/resources_testing/cookie.png",

    "object_description": "It's a very nice cookie :3"
  },
  "custom_description3": {
    "object_name": "Epic Cookie 3",
    "use_object_image": false,
    "object_image_path": "",
    "object_description": ""
  },
  "custom_data_table": {
    "table_object_headers": ["durability", "insanity"],
    "table_object_data": ["128", "56/64"]
  },
  "custom_recipe_table": {
    "matrix_size": [2, 2],
    "recipe_item_input_icon_paths": ["/resources_testing/cookie.png", "/resources_testing/cookie.png", "/resources_testing/cookie.png", "/resources_testing/cookie.png"],
    "recipe_item_input_names": ["cookie", "cookie", "cookie", "cookie"],
    "recipe_process_name": "crafting",
    "output_item_count": 1,
    "recipe_item_output_icon_paths": ["/resources_testing/cookie.png"],
    "recipe_item_output_names": ["cookie"]
  },
  "custom_video_player": {
    "video_url": "https://www.youtube.com/embed/SwPPYiEm8NQ?si=Izzho6OBvKoUfCaY"
  },
  "custom_code_snippet": {
    "code_snippet": "use std::io;\n\nfn main() {\n    println!(\"Welcome to the Shrimple Calculator!\");\n\n    loop {\n        println!(\"\\nEnter the first number:\");\n        let mut num1 = String::new();\n        io::stdin().read_line(&mut num1).expect(\"Failed to read line\");\n        let num1: f64 = num1.trim().parse().expect(\"Please enter a valid number\");\n\n        println!(\"Enter an operator (+, -, *, /):\");\n        let mut operator = String::new();\n        io::stdin().read_line(&mut operator).expect(\"Failed to read line\");\n        let operator = operator.trim();\n\n        println!(\"Enter the second number:\");\n        let mut num2 = String::new();\n        io::stdin().read_line(&mut num2).expect(\"Failed to read line\");\n        let num2: f64 = num2.trim().parse().expect(\"Please enter a valid number\");\n\n        let result = match operator {\n            \"+\" => num1 + num2,\n            \"-\" => num1 - num2,\n            \"*\" => num1 * num2,\n            \"/\" => {\n                if num2 == 0.0 {\n                    println!(\"Error: Cannot divide by zero.\");\n                    continue;\n                } else {\n                    num1 / num2\n                }\n            }\n            _ => {\n                println!(\"Invalid operator! Please use +, -, *, or /.\");\n                continue;\n            }\n        };\n\n        println!(\"The result of {} {} {} is: {}\", num1, operator, num2, result);\n\n        println!(\"\\nDo you want to perform another calculation? (y/n):\");\n        let mut again = String::new();\n        io::stdin().read_line(&mut again).expect(\"Failed to read line\");\n        if again.trim().to_lowercase() != \"y\" {\n            println!(\"Goodbye!\");\n            break;\n        }\n    }\n}\n"
  }
}